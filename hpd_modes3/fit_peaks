#!/usr/bin/python3
# Read *.lst file with all files, mode classification, fit parameters
# write following files:
#  - */table.dat: table with file parameters (temperature etc.)
#  - */modes.dat: table with mode parameters (slope, shift, etc.)
#  - */mdiff.dat: table with mode differences (slope ratio, relative shift)

import json
import os
import os.path
import re
import numpy
import math
import matplotlib.pyplot as plt
import scipy.optimize
import argparse

#########################################
#### some constants

tc = 2.372743e-3                 # Tc at 25.7 bar [K]
dfdi=405.886*20378/(2*3.1415926) # convert NMR current to frequency [Hz/A]
nmr_i0 = 0.86675                 # reference NMR current [A]
ires = 5e-6                      # main source of error: power supply resolution, 5uA
xres = 2 * dfdi*ires*1e-3        # x measurement error, kHz

# predefined peak scales for each type
scales = [1., 1.7314984, 1.2340359, 0, 0.57335022, 0.40650241, 0.78307457, 0.415043]

cols=('C0','C1','C2','C3','C4','C5','C6','C7','C8','C9','r','g','b','c','m','y','k')
minlen = 0.05  # skip too short modes in scale/slope calculations

################################
# Single argument: list file

parser = argparse.ArgumentParser()
parser.add_argument('lstfile')

args = parser.parse_args()
#########################################

if not os.path.isfile(args.lstfile):
  print("Error: file not found: %s" %(args.lstfile))
  exit(1)

pref, e = os.path.splitext(args.lstfile)

outt = open(pref + '.tab', 'w')
outm = open(pref + '.mod', 'w')
outd = open(pref + '.dif', 'w')
outs = open(pref + '.dsh', 'w')
os.makedirs(pref + '.dat', exist_ok=True) # for png files

print("# file - time - grad - quad - exc - ttc - didt" +
       " - ref_t - larm_t - t_x0 - t_x - t_l - t_h - t_y - sc", file=outt)
print("# file - type - name - grad - exc - ttc - xl - xr - xc - yc - sl - sl_e - sh2 - sl2", file=outm)

############################################
def parse_pars(pars, allowed, defaults = {}):
  ret = defaults.copy()
  for i in range(len(pars)):
    mm = re.search("^([a-z0-9_]+)=(.*)", pars[i], re.IGNORECASE)
    if not mm:
      print("Error: can't parse parameter: ", pars[i])
      exit(1)
    v = mm.group(2)
    if mm.group(1) in allowed:
      ret[mm.group(1)] = float(mm.group(2))
    else:
      print("Error: unknown setting: ", pars[i])
      exit(1)
  return ret

############################################
############################################
# read parameters from *.lst file
files = {}
def_pars = {}
par_names = ('type', 'qual', 'ymin', 'ymax', 'xmin', 'xmax')
xlim = ()
ylim = ()
xlims = {}
ylims = {}

for l in open(args.lstfile):
  if l[0] == '#': continue
  tmp = l.split()
  if len(tmp)>0 and tmp[0] == 'set':
    def_pars =  pars = parse_pars(tmp[1:], par_names)
    continue;

  if len(tmp)>0 and tmp[0] == 'xlim':
    if len(tmp)>2: xlim = (float(tmp[1]),float(tmp[2]))
    else: xlim = ()
    continue

  if len(tmp)>0 and tmp[0] == 'ylim':
    if len(tmp)>2: ylim = (float(tmp[1]),float(tmp[2]))
    else: ylim = ()
    continue

  if len(tmp) < 2: continue
  fpref = tmp[0]
  name  = tmp[1]

  # parse parameters
  pars = parse_pars(tmp[2:], par_names, def_pars)

  if not 'type' in pars:
    print("Error: type is not set for %s: %s" %(pref,fpref))
    exit(1)

  if fpref not in files: files[fpref] = {}
  files[fpref][name]  = pars
  if len(xlim)==2: xlims[fpref] = xlim
  if len(ylim)==2: ylims[fpref] = ylim

############################################
############################################
## for each file
for fpref in sorted(files):
  full_pref = '../hpd_modes/' + fpref
  basename = os.path.basename(fpref)
  inf  = json.load(open(full_pref + '.inf'))
  inff = json.load(open(full_pref + '.inff'))
  print(full_pref + '.inff')

  nmr_t, nmr_i, nmr_x, nmr_y =\
    numpy.loadtxt(full_pref + '.nmr1', unpack=True)

  t0 = float(inf.get('t1abs', 0))
  grad = float(inf.get('grad', math.nan))*1e3
  quad = float(inf.get('quad', math.nan))*1e3
  exc  = float(inf.get('exc',  math.nan))
  ttc  = float(inf.get('temp_corr', math.nan))/tc

  # fit central part of the nmr sweep
  ii = numpy.logical_and(nmr_t-nmr_t[0] > 5, nmr_t[-1]-nmr_t > 5)
  pnmr = numpy.polyfit(nmr_t[ii]-t0, nmr_i[ii], 1)

  ###############################
  #### Merge peaks with same name, merge harmonics,
  #### convert time to frequency
  plt.clf()
  peaks={}
  if len(inff.get('fig_peaks',[]))<1: continue
  for i in inff.get('fig_peaks',[]):
    T = numpy.array(i['T'], dtype=float)
    F = numpy.array(i['F'], dtype=float)
    A = numpy.array(i['A'], dtype=float)
    Q = numpy.array(i['Q'], dtype=float)

    # interpolate NMR current to peak data
    #I = numpy.interp(T, nmr_t-t0, nmr_i, math.nan, math.nan)
    I = numpy.polyval(pnmr, T)

    # merge harmonics
    name = i['name']
    mm = re.search("^([a-z]+)([0-9]+)", name)
    if mm:
      name = mm.group(1)
      F /= int(mm.group(2))

    if name=='L': continue

    # x, y, w values for fitting
    x = - (I - nmr_i0)*dfdi * 1e-3 # [kHz]
    y = F**2 * 1e-6                # [kHz^2]

    plot_sc=1
    if name[0]=='l': plot_sc = 10

    if not name in peaks:
      peaks[name] =\
        {'x': numpy.array(()),
         'y': numpy.array(()),
         'q': numpy.array(()),
         't': int(files[fpref][name]['type']),
         'plot_sc': plot_sc}
    peaks[name]['x'] = numpy.append(peaks[name]['x'], x)
    peaks[name]['y'] = numpy.append(peaks[name]['y'], y)
    peaks[name]['q'] = numpy.append(peaks[name]['q'], Q)

    plt.plot(x,y*plot_sc, '.')

  ###############################
  ## fit each peak
  for n in peaks:
    if n == 'L': continue
    if not n in files[fpref]:
      print("Error: %s not in the list %s: %s" %(n,pref,fpref))
      exit(1)
    pars = files[fpref][n]

    x = peaks[n]['x']
    y = peaks[n]['y']
    q = peaks[n]['q']
    t = peaks[n]['t']
    k = peaks[n]['plot_sc']

    jj = numpy.ones(x.size, dtype=bool)
    # skip points
    if 'qual' in pars: jj = numpy.logical_and(jj, q>pars['qual'])
    if 'xmin' in pars: jj = numpy.logical_and(jj, x>pars['xmin'])
    if 'xmax' in pars: jj = numpy.logical_and(jj, x<pars['xmax'])
    if 'ymin' in pars: jj = numpy.logical_and(jj, y>pars['ymin'])
    if 'ymax' in pars: jj = numpy.logical_and(jj, y<pars['ymax'])

    numpy.savetxt('%s.dat/%s_%02d.dat' %(pref, basename,t),
       numpy.transpose([x,y,jj]), fmt="%f %f %d",
       header='freq.shift, kHz -- mode freq^2, kHz^2')

    if jj.any():
      x = x[jj]
      y = y[jj]

    # linear fit
    p = numpy.polyfit(x,y,1)

    xl = numpy.min(x)
    xr = numpy.max(x)
    xc = numpy.average(x)
    yc = numpy.polyval(p,xc)
    sl = p[0]

    # error estimation: (x resolution)/(x length)
    # this works for "good signals", without noizy points
    sl_e1 = sl*xres/(xr-xl)/2
    # it is better to use predefined slope, measured one could be 0
    # 3 is an "slope of the type 0", it should be 2.5..4
    if len(scales)>t: sl_e1 = 3*scales[t]*xres/(xr-xl)/2

    # estimate error from point scattering
    sl_e2 = numpy.var(y - numpy.polyval(p,x))**0.5/(xr-xl)
    sl_e = numpy.hypot(sl_e1, sl_e2)
    x0  = xc-yc/sl
    x0e = sl_e * yc/sl**2

    # plotting
    xx = numpy.linspace(x0,numpy.max(x))
    plt.plot(x,y*k, 'k.', markersize=1)
    plt.plot(xx, k*numpy.polyval(p,xx), 'k-', linewidth=0.5)

    plt.plot(xx, k*((sl-sl_e)*(xx-xc) + yc), 'k--', linewidth=0.5)
    plt.plot(xx, k*((sl+sl_e)*(xx-xc) + yc), 'k--', linewidth=0.5)
    plt.plot(numpy.array((x0-x0e,x0+x0e)), numpy.array((0,0)), 'k', linewidth=3)

    plt.text(xr+0.002, k*numpy.polyval(p,xr), "%d(%s) %.2f %.2f"%(t,n,sl,sl_e1))
    plt.plot(xc,k*yc, 'ko', markersize=8)
    plt.plot(xc,k*yc, 'ro', markersize=6)

    peaks[n]['xl'] = xl
    peaks[n]['xr'] = xr
    peaks[n]['xc'] = xc
    peaks[n]['yc'] = yc
    peaks[n]['sl']   = sl
    peaks[n]['sl_e'] = sl_e
    peaks[n]['x0']   = x0
    peaks[n]['x0e'] = x0e

  #########################################
  ## for each pair of modes calculate slope ratio
  for m1 in peaks:
    text=''
    t1 = peaks[m1]['t']
    s1 = peaks[m1]['sl']
    e1 = peaks[m1]['sl_e']
    xl = peaks[m1]['xl']
    xr = peaks[m1]['xr']
    if xr-xl<minlen: continue
    for m2 in peaks:
      t2 = peaks[m2]['t']
      s2 = peaks[m2]['sl']
      e2 = peaks[m2]['sl_e']
      xl = peaks[m2]['xl']
      xr = peaks[m2]['xr']
      if xr-xl<minlen: continue

      if t2 <= t1: continue
      sc   = s2/s1
      sc_e = numpy.hypot(e2/s1, e1*s2/s1**2)
      print("%-30s %02d.%02d  %.3f %.3f %.4f  %e %e"\
         %(fpref, t1,t2, grad, exc, ttc, sc, sc_e), file=outd)
      text += '%d-%d: %.2f %.2f\n' %(t1,t2,sc,sc_e)

    if text=='': continue
    k1 = peaks[m1]['plot_sc']
    x = peaks[m1]['xr']
    y = (x - peaks[m1]['xc'])*s1 + peaks[m1]['yc']
    plt.text(x+0.002, k1*y, text, va='top')

  #########################################
  ## calculate "signal scale", using mean mode slopes
  sc=0
  scw=0
  for m1 in peaks:
    t = peaks[m1]['t']
    s = peaks[m1]['sl']
    e = peaks[m1]['sl_e']
    k = 0

    xl = peaks[m1]['xl']
    xr = peaks[m1]['xr']
    if xr-xl<minlen: continue

    if t<len(scales): k = scales[t]
    if k>0:
      w = (s/e)**2
      sc+=s/k*w
      scw+=w
  if scw>0: sc/=scw
  print(fpref, sc)

  #########################################
  ## calculate mode slopes and shifts for this scale
  for m1 in peaks:
    t = peaks[m1]['t']
    xl = peaks[m1]['xl']
    xr = peaks[m1]['xr']
    xc = peaks[m1]['xc']
    yc = peaks[m1]['yc']
    sl = peaks[m1]['sl']
    sl_e = peaks[m1]['sl_e']
    x0 = peaks[m1]['x0']
    x0e = peaks[m1]['x0e']
    k  = peaks[m1]['plot_sc']
    xx=numpy.array((xl,xr))
    sl2 = 0
    sh2 = 0
    if t<len(scales): sl2 = sc*scales[t]
    if sl2!=0: sh2 = xc - yc/sl2
    peaks[m1]['sh2'] = sh2

    print("%s %2d %2s  %.2f %.3f %.3f  %f %f %f %f  %f %f  %f %f" %\
      (fpref, t, n, grad, exc, ttc,
      xl,xr,xc,yc, sl, sl_e,  sh2, sl2), file=outm)

    if sl2!=0:
      plt.plot(xx, sl2*(xx-sh2), cols[t%len(cols)] + '-', linewidth=3)



  #########################################
  ## for each pair of modes calculate shift difference
  for m1 in peaks:
    if not 'sh2' in peaks[m1]: continue
    t1 = peaks[m1]['t']
    s1 = peaks[m1]['sh2']
    for m2 in peaks:
      if not 'sh2' in peaks[m2]: continue
      t2 = peaks[m2]['t']
      s2 = peaks[m2]['sh2']

      if t2 <= t1: continue
      dsh = s2-s1
      print("%-30s %02d.%02d  %.3f %.3f %.4f  %e"\
         %(fpref, t1,t2, grad, exc, ttc, dsh), file=outs)


  ###############################
  ##  print file table (*.tab)
  print(("%-30s %.7f %6.2f %6.2f %4.2f %6.4f %6.2f"+\
     "   %5.2f %5.2f %5.2f %5.2f %5.2f %5.2f %5.2f %f") %\
    (fpref, t0, grad, quad, exc, ttc,
     float(inf.get('didt', math.nan)),
     float(inff.get('ref_t', math.nan)),
     float(inff.get('larm_t', math.nan)),
     float(inff.get('time_x0', math.nan)),
     float(inff.get('time_x', math.nan)),
     float(inff.get('time_l', math.nan)),
     float(inff.get('time_h', math.nan)),
     float(inff.get('time_y', math.nan)), sc) , file=outt)

  #########################################

  plt.title(fpref)
  if fpref in xlims: plt.xlim(xlims[fpref])
  if fpref in ylims: plt.ylim(ylims[fpref])
  plt.xlabel('frequency shift, kHz')
  plt.ylabel('peak frequency squared, kHz^2')
  plt.savefig(pref + '.dat/' + basename + '.png')


